@inherits DriverJsPopoverProps
@using Microsoft.JSInterop
@implements IAsyncDisposable

@ChildContent(PopoverId)

@code {

    private string PopoverId => $"popover-{GetHashCode()}";

    [Parameter] public RenderFragment<string> ChildContent { get; set; }

    [Parameter, EditorRequired] public int Step { get; set; }

    [CascadingParameter] public DriverStore Store { get; set; }

    [Inject] public IJSRuntime Js { get; set; }
    
    [Inject] public IDriverJs DriverJs { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        Model.Element = "#" + PopoverId;
        Store.AddPopover(Step, Model);
        
        OnDisableButtonUpdate += UpdateDisableButtons;
        OnShowButtonUpdate += UpdateShowButtons;

        await base.OnInitializedAsync();
    }

    private void UpdateShowButtons(object? sender, EventArgs args)
    {
        var buttons = new List<string>();

        if (ShowNextButton) buttons.Add(DriverJsDefaultValues.ButtonNext);
        if (ShowCloseButton) buttons.Add(DriverJsDefaultValues.ButtonClose);
        if (ShowPreviousButton) buttons.Add(DriverJsDefaultValues.ButtonPrevious);

        Model.ShowButtons = buttons.Count > 0 ? buttons.ToArray() : null;
    }

    private void UpdateDisableButtons(object? sender, EventArgs args)
    {
        var buttons = new List<string>();

        if (DisableCloseButton) buttons.Add(DriverJsDefaultValues.ButtonClose);
        if (DisableNextButton) buttons.Add(DriverJsDefaultValues.ButtonNext);
        if (DisablePreviousButton) buttons.Add(DriverJsDefaultValues.ButtonPrevious);

        Model.DisableButtons = buttons.Count > 0 ? buttons.ToArray() : null;
    }

    public ValueTask DisposeAsync()
    {
        OnDisableButtonUpdate -= UpdateDisableButtons;
        OnShowButtonUpdate -= UpdateShowButtons;
        Store.RemovePopover(Step);
        return ValueTask.CompletedTask;
    }

}